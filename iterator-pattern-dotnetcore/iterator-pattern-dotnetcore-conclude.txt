Starter Project: https://github.com/utarn/csharp-design-pattern-iterator-netcore/tree/6ed526ba7c7943e601c0f2d89d2cebe8ecf957af
Finish Project: https://github.com/utarn/csharp-design-pattern-iterator-netcore

iterator-pattern-dotnetcore - 2:
concept เดียวกับ iterator-pattern แต่ มีการ Implement function builtin
จาก C# ทำให้โค้ดสวยงามมากขึ้น IEnumerable ไม่ต้องสร้าง Interface เอง

โดย Class Browser จะ Implement IEnumerable<BrowserHistory>
แก้ Method ที่ ได้รับมาจาก Interface ได้แก่ 
GetEnumerator() => new ListIterator(this)
, IEnumerable.GetEnumerator() => GetEnumerator()
ไม่มี Index เพราะเก็บใน ListIterator

และ Subclass ListIterator implement IEnumerator<BrowserHistory>
โดยแก้ Method ที่ได้รับมาจาก Interface ได้แก่

IEnumerator.Current => Current

- MoveNext() =>  คือ Next() + HasNext()
- Reset() = set index = 1

Program.cs: ใช้ foreach โค้ดดูสวย

            var browser = new Browser();
            browser.PushHistory(new BrowserHistory("a", new DateTime(2020, 1, 1)));
            browser.PushHistory(new BrowserHistory("b", new DateTime(2020, 1, 2)));
            browser.PushHistory(new BrowserHistory("c", new DateTime(2020, 1, 3)));

            foreach (var history in browser)
            {
                Console.WriteLine(history);
            }


